// Relabel Button Plugin (cmd j)


var helpers = {

  "removeSharedStyles": function(styles, selectedStyles, iterations) {
    var removedCount = 0;

    for (var i = 0; i < iterations; i++) {
      for (var j = 0; j < styles.numberOfSharedObjects(); j++) {
        var sharedObject = styles.sharedObjectAtIndex(j);
        for (var k = 0; k < sharedObject.instances().count(); k++) {
          var sharedObjectInstance = sharedObject.instances().objectAtIndex(k)
          var objectID = sharedObjectInstance.UTF8String();
          if (selectedStyles.hasOwnProperty(objectID)) {
            var instance = selectedStyles[objectID];
            sharedObject.unregisterInstance(instance);
            removedCount += 1;
          };
        };
      };
    };

    return removedCount;
  },
  "recursivelyGetStylesForItem": function(item, includeGroupElements, selectedStyles, depth, maxDepth) {
    depth["number"] = depth["number"] + 1;
    if (depth["number"] > maxDepth["number"]) {
      maxDepth["number"] = depth["number"];
    };

    if (item.isKindOfClass(NSArray.class())) { // NSArray
      for (var i = 0; i < item.count(); i++) {
        var subItem = item.objectAtIndex(i);
        helpers.recursivelyGetStylesForItem(subItem, includeGroupElements, selectedStyles, depth, maxDepth);
      };
    } else if (item.respondsToSelector("layers") && (item.isKindOfClass(MSArtboardGroup.class()) || includeGroupElements)) { // Layer with children
      var layers = item.layers();
      for (var i = 0; i < layers.count(); i++) {
        var layer = layers.objectAtIndex(i);
        helpers.recursivelyGetStylesForItem(layer, includeGroupElements, selectedStyles, depth, maxDepth);
      };
    };
    helpers.getStylesForLayer(item, selectedStyles);

    depth["number"] = depth["number"] - 1;
  },
  "getStylesForLayer": function(layer, selectedStyles) {
    if (layer.isKindOfClass(MSLayerGroup.class())) { // If the layer is a symbol
      selectedStyles[layer.objectID()] = layer;
    };

    if (layer.respondsToSelector("style")) { // If the layer has a style
      var style = layer.style();
      selectedStyles[style.objectID()] = style;
    };
  }
};










  var doc = context.document;
  var selection = context.selection;




  var stylesToRemove = true;
  var includeGroupElements = stylesToRemove[3];

  var shouldRemoveSymbols    = true;
  var shouldRemoveStyles     = true;
  var shouldRemoveTextStyles = true;

  var selectedStyles = new Object();
  var depth          = {"number": 0};
  var maxDepth       = {"number": 0};

  var infoText    = "";
  var removalText = "";

  if (shouldRemoveSymbols || shouldRemoveStyles || shouldRemoveTextStyles) {
    helpers.recursivelyGetStylesForItem(selection, includeGroupElements, selectedStyles, depth, maxDepth);

    infoText = "Removed ";


      var sharedSymbols = doc.documentData().layerSymbols();
      var numberOfRemovedSymbols = helpers.removeSharedStyles(sharedSymbols, selectedStyles, maxDepth["number"]);
      removalText += numberOfRemovedSymbols + " symbol" + (numberOfRemovedSymbols != 1 ? "s" : "");


   

    infoText += removalText + ".";
  } else {
    infoText = "See you changed your mind there, mate. Better luck next time! :)";
  };

  log(infoText);
  doc.showMessage(infoText);
  doc.showMessage("test");







/*
  Author: Ken Moore (with bits from Alexander Kudymov's Dynamic Button plugin)
  Version: 0.4

  The Relabel Button plugin lets you easily change the label of any button 
  (a group containing a text layer and other visual elements). Just select the 
  group and press Cmd+K, type the new label into the prompt, and the button is 
  resized to fit the new text with prior padding preserved.   
*/

// Display an error alert
function alert(msg, title) {
  title = title || "alert";
  var app = [NSApplication sharedApplication];
  [app displayDialog:msg withTitle:title];
}

// Derive the padding between the text layer and the background layers
function getButtonPadding(buttonRect, textLayer) {
  var textFrame = [textLayer frame];

  return {
    top: [textFrame y] - [buttonRect y],
    right: ([buttonRect x] + [buttonRect width]) - ([textFrame x] + [textFrame width]),
    bottom: ([buttonRect y] + [buttonRect height]) - ([textFrame y] + [textFrame height]),
    left: [textFrame x] - [buttonRect x]
  };
}

// Set the new padding (resizes layers that surround the text and repositions any 
// layers to the right of the text layer's left edge)
function setButtonPadding(buttonRect, textLayer, layers, padding) {
  // determine how much the background is changing
  var textFrame = [textLayer frame];
  var newWidth = padding.left + [textFrame width] + padding.right;
  var deltaWidth = newWidth - [buttonRect width];

  // loop through the layers and resize or reposition all (except textLayer)
  for (var i = 0; i < [layers length]; i++) {
    var layer = [layers objectAtIndex:i];

    if (layer != textLayer) {
      var layerFrame = [layer frame];

      if ([layerFrame x] < [textFrame x] && [layerFrame x] + [layerFrame width] > [textFrame x]) {
        // if the layer spans the x coordinate of the text layer, assume it's a background layer
        // and resize its width accordingly
        [layerFrame addWidth: deltaWidth];
      }
      else if ([layerFrame x]  > [textFrame x]) {
        // if the layer is entirely to the right of the text layer, just reposition it
        [layerFrame addX:deltaWidth];
      }
    }
  }
}

// Display an error alert and exit
function invalidSelection() {
  alert('Select the group layer of the button to modify (it must be a group containing at least one text layer and one other layer).', 'Select group');
  throw(nil); // exit the plugin
}


// Main

// Begin validation of selection
// Ensure there's only one layer selected
if ([selection count] != 1) {
  invalidSelection();
}

var group = [selection objectAtIndex:0];
var buttonRect = [group absoluteRect];

// Ensure the selected layer is a group
if (!(group instanceof MSLayerGroup)) {
  invalidSelection();
}

var layers = [group layers];

// Ensure there are at least 2 layers in the group (text and one other layer at minimum)
if ([layers length] < 2) {
  invalidSelection();
}

// Loop through child layers to identify the text layer
var textLayer = nil;
for (var i = 0; i < [layers length]; i++) {
  var layer = [layers objectAtIndex:i];
  if (layer instanceof MSTextLayer) {
    textLayer = layer;
    break;
  }
}

// Ensure at least one text layer exists
if (!textLayer) {
  invalidSelection();
}


// Extract current padding based on buttonRect and textLayer
var buttonPadding = getButtonPadding(buttonRect, textLayer);

// Prompt user for input of new button text
var text = [doc askForUserInput:"New button text" initialValue:[textLayer stringValue]];

// Only forge on if user didn't press Cancel
if (text) {
  // If the text layer is fixed width, make it auto
  if ([textLayer textBehaviour] == 1) {
    [textLayer setTextBehaviour:0];
  }

  // If the text layer is not left aligned, make it so
  if ([textLayer textAlignment] != 0) {   // 0 = left, 1 = right, 2 = center, 3 = justified.
    [textLayer setTextAlignment: 0];
  }

  // Set the text layer to the new text
  [textLayer setStringValue: text];
  [textLayer adjustFrameToFit];

  // Resize the button based on the original padding
  setButtonPadding(buttonRect, textLayer, layers, buttonPadding);
  group.resizeRoot(true); // resize the group field

  // Done!  
}

